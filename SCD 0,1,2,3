https://adatis.co.uk/introduction-to-slowly-changing-dimensions-scd-types/ 


0 -- FIXED ATTRIBUTES


1)-- OVER WRITE THE OLD VALUES 
           update oldtable set o.address=n.address,
                               o.phoneno=n.phoneno,
                               o.name=n.name 
form oldtable o join newtable as n
on o.no=n.no
----
2) HISTORICAL ATTRIBUTES
insert into oldtale select * form newtable as N join oldtable  as o
 on (o.id=n.id) and 

                     (  o.address<>n.address and 
                        o.phoneno<>n.phoneno and 
                        o.name<>n.name )


--------------------------or---------------
  on (o.id=n.id) and 
                             ( o.address<>n.address or
                              o.phoneno<>n.phoneno or

                               o.name<>n.name) 
Introduction to Slowly Changing Dimensions (SCD) Types
POSTED ON 14TH MARCH 2014 BY SIMON WHITELEY
14
Mar
When setting about writing a recent blog post, I wanted to link to a clear, concise blog post on the different Slowly Changing Dimensions (SCD) types for anyone not familiar with the topic. Whilst there are a variety of thorough introductions out there, I didn’t find one as clear and concise as I’d like.

I therefore give you my own offering, a quick introduction to Slowly Changing Dimensions, or SCD, in a datawarehousing scenario.

For a more detailed discussion of slowly changing dimensions, I’d suggest looking at Kimball Group’s own posts on type 1 and types 2 and 3.

What are slowly changing dimensions?

When organising a datawarehouse into Kimball-style star schemas, you relate fact records to a specific dimension record with its related attributes. But what if the information in the dimension changes? Do you now associate all fact records with the new value? Do you ignore the change to keep historical accuracy? Or do you treat facts before the dimension change differently to those after?

It is this decision that determines whether to make your dimension a slowly changing one. There are several different types of SCD depending on how you treat incoming change.

What are the types of SCD?

Very simply, there are 6 types of Slowly Changing Dimension that are commonly used, they are as follows:

Type 0 – Fixed Dimension
No changes allowed, dimension never changes
Type 1 – No History
Update record directly, there is no record of historical values, only current state
Type 2 – Row Versioning
Track changes as version records with current flag & active dates and other metadata
Type 3 – Previous Value column
Track change to a specific attribute, add a column to show the previous value, which is updated as further changes occur
Type 4 – History Table
Show current value in dimension table but track all changes in separate table
Type 6 – Hybrid SCD
Utilise techniques from SCD Types 1, 2 and 3 to track change
In reality, only types 0, 1 and 2 are widely used, with the others reserved for very specific requirements. Confusingly, there is no SCD type 5 in commonly agreed definitions.

After you have implemented your chosen dimension type, you can then point your fact records at the relevant business or surrogate key. Surrogate keys in these examples relate to a specific historical version of the record, removing join complexity from later data structures.

Practical Examples

We have a very simple ‘customer’ dimension, with just 2 attributes – Customer Name and Country:

simple customer dimension

However, Bob has just informed us that he has now moved to the US and we want to update our dimension record to reflect this. We can see how the different SCD types will handle this change and the pro/cons of each method.

Type 0

Our table remains the same. This means our existing reports will continue to show the same figures, maybe it is a business requirement that each customer is always allocated to the country they signed up from.

All future transactions associated to Bob will also be allocated to the ‘United Kingdom’ country.

Type 1

The table is updated to reflect Bob’s new country:

customer dimension table

All fact records associated with Bob will now be associated with the ‘United States’ country, regardless of when they occurred.

We often just want to see the current value of a dimension attribute – it could be that the only dimension changes that occur are corrections to mistakes, maybe there is no requirement for historical reporting.

Type 2

In order to support type 2 changes, we need to add four columns to our table:

· Surrogate Key – the original ID will no longer be sufficient to identify the specific record we require, we therefore need to create a new ID that the fact records can join to specifically.

· Current Flag – A quick method of returning only the current version of each record

· Start Date – The date from which the specific historical version is active

· End Date – The date to which the specific historical version record is active

With these elements in place, our table will now look like:

customer dimension table with surrogate key

This method is very powerful – you maintain the history for the entire record and can easily perform change-over-time analysis. However, it also comes with more maintenance overhead, increased storage requirement and potential performance impacts if used on very large dimensions.

Type 2 is the most common method of tracking change in data warehouses.

Type 3

Here, we add a new column called “Previous Country” to track what the last value for our attribute was.

add new columns to customer dimension

Note how this will only provide a single historical value for Country. If the customer changes his name, we will not be able to track it without adding a new column. Likewise, if Bob moved country again, we would either need to add further “Previous Previous Country” columns or lose the fact that he once lived in the United Kingdom.

Type 4

There is no change to our existing table here, we simply update the record as if a Type 1 change had occurred. However, we simultaneously maintain a history table to keep track of these changes:

Our Dimension table reads:

tracking dimension table

Whilst our Type 4 historical table is created as:

Historical data in customer dimension table 

Depending on your requirements, you may place both ID and Surrogate Key onto the fact record so that you can optimise performance whilst maintaining functionality.

Separating the historical data makes your dimensions smaller and therefore reduces complexity and improves performance if the majority of uses only need the current value.

However, if you do require historical values, this structure adds complexity and data redundancy overheads. It is generally assumed that the system will use Type 1 or Type 2 rather than Type 4.

Type 6

The ‘Hybrid’ method simply takes SCD types 1, 2 and 3 and applies all techniques. We would maintain a history of all changes whilst simultaneously updating a “current value” column on all records.

maintaining history of changes 

This gives you the ability to provide an element of change comparison without additional calculation, whilst still maintaining a full, detailed history of all changes in the system.

Personally, if this requirement came up, I would avoid the data redundancy of this extra column and simply calculate the current value using the “LAST_VALUE()” window function at run-time. Although this depends on your priorities between data storage and direct querying performance.
